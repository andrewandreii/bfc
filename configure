#! /usr/bin/env python3
from pathlib import Path
from typing import Generator, NamedTuple
from dataclasses import dataclass
from io import TextIOWrapper
import errorh_generator

def all_subdirs(d: Path) -> Generator[Path, None, None]:
    return filter(lambda x: x.is_dir(), d.iterdir())

source_dirs = [Path('src')]
source_dirs.extend(all_subdirs(source_dirs[0]))

header_dirs = [Path('include')]
header_dirs.extend(all_subdirs(header_dirs[0]))


DEBUGGING = True

@dataclass
class CompilerOptions:
    cc = 'gcc'

    cflags = '-Wall --std=c2x'
    cflags_debug = '-g -DDEBUG'

    ldflags = ''
    ldflags_debug = ''

    build_dir = Path('build')


class Rule(NamedTuple):
    name: str
    requirements: list[str]
    body: list[str]

def write_rule(out: TextIOWrapper, rule: Rule):
    out.write(f'{rule.name}: {" ".join(rule.requirements)}\n')
    
    if len(rule.body) > 0:
        out.writelines(('\t' + x for x in rule.body))
        out.write('\n')
    
    out.write('\n')


def generate_object_command(opt: CompilerOptions, include_dirs: list[Path]) -> str:
    include_flags = '-I' + ' -I'.join(map(lambda x: x.as_posix(), include_dirs))
    return f'{opt.cc} $^ {opt.cflags} {opt.cflags_debug if DEBUGGING else ""} {include_flags} -c -o $@'

def generate_bin_command(opt: CompilerOptions):
    return f'{opt.cc} $^ {opt.ldflags} {opt.ldflags_debug if DEBUGGING else ""} -o {opt.build_dir.joinpath("bfc").as_posix()}'

rules: list[Rule] = [
    Rule('all', ['bfc'], []),
    Rule('bfc', ['$(objs)'], [generate_bin_command(CompilerOptions)]),
    Rule('%.o', ['%.c'], [generate_object_command(CompilerOptions, header_dirs)]),
    Rule('clean', [], ['rm $(objs)'])
]

with open('Makefile', 'w') as out:
    all_wildcards = [f'$(wildcard {x.joinpath("*.c").as_posix()})' for x in source_dirs]
    out.write(f'sources = {" ".join(all_wildcards)}\n')
    out.write(f'objs = $(sources:.c=.o)\n\n')

    for rule in rules:
        write_rule(out, rule)
